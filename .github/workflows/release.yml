name: "Release"

on:
  push:
    tags:
      - "v*"

env:
  BUILDNAME: speechly-slu

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: latest

  test:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: setup
        uses: actions/setup-go@v1
        with:
          go-version: "1.16"
      - name: install portaudio
        run: |
          sudo apt-get update && \
          sudo apt-get install portaudio19-dev
      - name: test
        run: make test

  build-macos:
    runs-on: macos-latest
    needs: [lint, test]
    env:
      ARCHNAME: speechly-slu-macos-amd64.tar.gz
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: setup
        uses: actions/setup-go@v1
        with:
          go-version: "1.16"
      - name: build
        run: |
          brew install pkg-config portaudio && \
          make build && \
          tar -czvf ${ARCHNAME} ${BUILDNAME}
      - name: upload
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ARCHNAME }}
          path: ${{ env.ARCHNAME }}

  build-linux:
    runs-on: ubuntu-latest
    needs: [lint, test]
    env:
      ARCHNAME: speechly-slu-linux-amd64.tar.gz
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: setup
        uses: actions/setup-go@v1
        with:
          go-version: "1.16"
      - name: build
        run: |
          sudo apt-get update && \
          sudo apt-get install portaudio19-dev && \
          make build && \
          tar -czvf ${ARCHNAME} ${BUILDNAME}
      - name: upload
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ARCHNAME }}
          path: ${{ env.ARCHNAME }}

  create_release:
    runs-on: ubuntu-latest
    needs: [build-macos, build-linux]
    steps:
      - name: create_release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false
      - name: upload_release
        env:
          RELEASE_UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
        run: echo ${RELEASE_UPLOAD_URL} > RELEASE_UPLOAD_URL_FILE.txt
      - name: "Upload release URL file"
        uses: actions/upload-artifact@v1
        with:
          name: RELEASE_UPLOAD_URL_FILE
          path: RELEASE_UPLOAD_URL_FILE.txt

  upload_assets:
    runs-on: ubuntu-latest
    needs: create_release
    strategy:
      matrix:
        artifact: ["speechly-slu-linux-amd64.tar.gz", "speechly-slu-macos-amd64.tar.gz"]
    steps:
      - name: download_release
        uses: actions/download-artifact@v1
        with:
          name: RELEASE_UPLOAD_URL_FILE
      - name: get_release_url
        id: get_release_url
        run: echo ::set-output name=RELEASE_UPLOAD_URL::$(cat RELEASE_UPLOAD_URL_FILE/RELEASE_UPLOAD_URL_FILE.txt)
      - name: download_artifact
        uses: actions/download-artifact@v1
        with:
          name: ${{ matrix.artifact }}
      - name: upload_release_artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object,
          # which include a `upload_url`.
          #
          # See this blog post for more info:
          # https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{ steps.get_release_url.outputs.RELEASE_UPLOAD_URL }}
          asset_path: "${{ matrix.artifact }}/${{ matrix.artifact }}"
          asset_name: "${{ matrix.artifact }}"
          asset_content_type: application/gzip
